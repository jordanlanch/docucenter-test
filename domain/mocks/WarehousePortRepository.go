// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/jordanlanch/docucenter-test/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// WarehousePortRepository is an autogenerated mock type for the WarehousePortRepository type
type WarehousePortRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *WarehousePortRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *WarehousePortRepository) FindByID(ctx context.Context, id uuid.UUID) (*domain.WarehousesAndPorts, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.WarehousesAndPorts
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.WarehousesAndPorts); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.WarehousesAndPorts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMany provides a mock function with given fields: ctx, pagination
func (_m *WarehousePortRepository) FindMany(ctx context.Context, pagination *domain.Pagination) ([]*domain.WarehousesAndPorts, error) {
	ret := _m.Called(ctx, pagination)

	var r0 []*domain.WarehousesAndPorts
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pagination) []*domain.WarehousesAndPorts); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.WarehousesAndPorts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Pagination) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, wp
func (_m *WarehousePortRepository) Store(ctx context.Context, wp *domain.WarehousesAndPorts) (*domain.WarehousesAndPorts, error) {
	ret := _m.Called(ctx, wp)

	var r0 *domain.WarehousesAndPorts
	if rf, ok := ret.Get(0).(func(context.Context, *domain.WarehousesAndPorts) *domain.WarehousesAndPorts); ok {
		r0 = rf(ctx, wp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.WarehousesAndPorts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.WarehousesAndPorts) error); ok {
		r1 = rf(ctx, wp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, wp
func (_m *WarehousePortRepository) Update(ctx context.Context, wp *domain.WarehousesAndPorts) (*domain.WarehousesAndPorts, error) {
	ret := _m.Called(ctx, wp)

	var r0 *domain.WarehousesAndPorts
	if rf, ok := ret.Get(0).(func(context.Context, *domain.WarehousesAndPorts) *domain.WarehousesAndPorts); ok {
		r0 = rf(ctx, wp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.WarehousesAndPorts)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.WarehousesAndPorts) error); ok {
		r1 = rf(ctx, wp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWarehousePortRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewWarehousePortRepository creates a new instance of WarehousePortRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWarehousePortRepository(t mockConstructorTestingTNewWarehousePortRepository) *WarehousePortRepository {
	mock := &WarehousePortRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
