// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/jordanlanch/docucenter-test/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CustomerRepository is an autogenerated mock type for the CustomerRepository type
type CustomerRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *CustomerRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *CustomerRepository) FindByID(ctx context.Context, id uuid.UUID) (*domain.Customer, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Customer
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Customer); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMany provides a mock function with given fields: ctx, pagination
func (_m *CustomerRepository) FindMany(ctx context.Context, pagination *domain.Pagination) ([]*domain.Customer, error) {
	ret := _m.Called(ctx, pagination)

	var r0 []*domain.Customer
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pagination) []*domain.Customer); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Pagination) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, c
func (_m *CustomerRepository) Store(ctx context.Context, c *domain.Customer) (*domain.Customer, error) {
	ret := _m.Called(ctx, c)

	var r0 *domain.Customer
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Customer) *domain.Customer); ok {
		r0 = rf(ctx, c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Customer) error); ok {
		r1 = rf(ctx, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, c, id
func (_m *CustomerRepository) Update(ctx context.Context, c *domain.Customer, id uuid.UUID) (*domain.Customer, error) {
	ret := _m.Called(ctx, c, id)

	var r0 *domain.Customer
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Customer, uuid.UUID) *domain.Customer); ok {
		r0 = rf(ctx, c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Customer, uuid.UUID) error); ok {
		r1 = rf(ctx, c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCustomerRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustomerRepository creates a new instance of CustomerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomerRepository(t mockConstructorTestingTNewCustomerRepository) *CustomerRepository {
	mock := &CustomerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
