// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/jordanlanch/docucenter-test/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// LogisticsRepository is an autogenerated mock type for the LogisticsRepository type
type LogisticsRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *LogisticsRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *LogisticsRepository) FindByID(ctx context.Context, id uuid.UUID) (*domain.Logistics, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Logistics
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Logistics); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Logistics)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMany provides a mock function with given fields: ctx, pagination
func (_m *LogisticsRepository) FindMany(ctx context.Context, pagination *domain.Pagination) ([]*domain.Logistics, error) {
	ret := _m.Called(ctx, pagination)

	var r0 []*domain.Logistics
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pagination) []*domain.Logistics); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Logistics)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Pagination) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, ll
func (_m *LogisticsRepository) Store(ctx context.Context, ll *domain.Logistics) (*domain.Logistics, error) {
	ret := _m.Called(ctx, ll)

	var r0 *domain.Logistics
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Logistics) *domain.Logistics); ok {
		r0 = rf(ctx, ll)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Logistics)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Logistics) error); ok {
		r1 = rf(ctx, ll)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, ll
func (_m *LogisticsRepository) Update(ctx context.Context, ll *domain.Logistics) (*domain.Logistics, error) {
	ret := _m.Called(ctx, ll)

	var r0 *domain.Logistics
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Logistics) *domain.Logistics); ok {
		r0 = rf(ctx, ll)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Logistics)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Logistics) error); ok {
		r1 = rf(ctx, ll)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLogisticsRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogisticsRepository creates a new instance of LogisticsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogisticsRepository(t mockConstructorTestingTNewLogisticsRepository) *LogisticsRepository {
	mock := &LogisticsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
