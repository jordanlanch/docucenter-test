// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/jordanlanch/docucenter-test/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// DiscountRepository is an autogenerated mock type for the DiscountRepository type
type DiscountRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *DiscountRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *DiscountRepository) FindByID(ctx context.Context, id uuid.UUID) (*domain.Discount, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Discount
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Discount); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Discount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByTypeAndQuantity provides a mock function with given fields: ctx, dtype, quantity
func (_m *DiscountRepository) FindByTypeAndQuantity(ctx context.Context, dtype domain.LogisticsType, quantity int) (*domain.Discount, error) {
	ret := _m.Called(ctx, dtype, quantity)

	var r0 *domain.Discount
	if rf, ok := ret.Get(0).(func(context.Context, domain.LogisticsType, int) *domain.Discount); ok {
		r0 = rf(ctx, dtype, quantity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Discount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.LogisticsType, int) error); ok {
		r1 = rf(ctx, dtype, quantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMany provides a mock function with given fields: ctx, pagination
func (_m *DiscountRepository) FindMany(ctx context.Context, pagination *domain.Pagination) ([]*domain.Discount, error) {
	ret := _m.Called(ctx, pagination)

	var r0 []*domain.Discount
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pagination) []*domain.Discount); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Discount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Pagination) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, d
func (_m *DiscountRepository) Store(ctx context.Context, d *domain.Discount) (*domain.Discount, error) {
	ret := _m.Called(ctx, d)

	var r0 *domain.Discount
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Discount) *domain.Discount); ok {
		r0 = rf(ctx, d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Discount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Discount) error); ok {
		r1 = rf(ctx, d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, d, id
func (_m *DiscountRepository) Update(ctx context.Context, d *domain.Discount, id uuid.UUID) (*domain.Discount, error) {
	ret := _m.Called(ctx, d, id)

	var r0 *domain.Discount
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Discount, uuid.UUID) *domain.Discount); ok {
		r0 = rf(ctx, d, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Discount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Discount, uuid.UUID) error); ok {
		r1 = rf(ctx, d, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDiscountRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewDiscountRepository creates a new instance of DiscountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDiscountRepository(t mockConstructorTestingTNewDiscountRepository) *DiscountRepository {
	mock := &DiscountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
